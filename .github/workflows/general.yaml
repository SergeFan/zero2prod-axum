name: Rust

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install sea-orm-cli
        run:
          cargo install sea-orm-cli

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client
          
          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"
          
          # Grant create db privilege to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      - name: Create app database
        run: |
          CREATE_DB_QUERY="CREATE DATABASE ${APP_DB_NAME};"
          PGPASSWORD="${APP_USER_PWD}" psql -U "${APP_USER}" -h "localhost" -d "postgres" -c "${CREATE_DB_QUERY}"

      - name: Migrate database
        run: |
          SKIP_DOCKER=true ./scripts/init_postgres.sh

      - name: Run tests
        run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    # TODO: Temporarily skip this job
    if: false
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install sea-orm-cli
        run:
          cargo install sea-orm-cli

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

          # Grant create db privilege to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      - name: Create app database
        run: |
          CREATE_DB_QUERY="CREATE DATABASE ${APP_DB_NAME};"
          PGPASSWORD="${APP_USER_PWD}" psql -U "${APP_USER}" -h "localhost" -d "postgres" -c "${CREATE_DB_QUERY}"

      - name: Migrate database
        run: |
          SKIP_DOCKER=true ./scripts/init_postgres.sh

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Generate report
        run: cargo llvm-cov report --html --output-dir coverage

      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage/
